#include<iostream>
#include<queue>
using namespace std;

class node {
	public:
	int data;
	node* left;
	node* right;
	
	node(int d) {
		this->data = d;
		this->left = NULL;
		this->right = NULL;
	}
};

node* insertIntoBST(node* root, int d) {
	if (root == NULL) {
		return new node(d);
	}
	
	if (root->data < d) {
		root->right = insertIntoBST(root->right, d);
	} else {
		root->left = insertIntoBST(root->left, d);
	}
	
	return root;
}

void takeInput(node* &root) {
	int data;
	cin >> data;
	
	while (data != -1) {
		root = insertIntoBST(root, data);
		cin >> data;
	}
}

void inorder(node* root) {
	if (root == NULL) return;
	inorder(root->left);
	cout << root->data << " ";
	inorder(root->right);
}

void preorder(node* root) {
	if (root == NULL) return;
	cout << root->data << " ";
	preorder(root->left);
	preorder(root->right);
}

void postorder(node* root) {
	if (root == NULL) return;
	postorder(root->left);
	postorder(root->right);
	cout << root->data << " ";
}


void levelOrderTraversal(node* root) {
	if (root == NULL) return;

	queue<node*> q;
	q.push(root);

	while (!q.empty()) {
		int levelSize = q.size(); // Number of nodes at current level

		for (int i = 0; i < levelSize; i++) {
			node* temp = q.front();
			q.pop();

			cout << temp->data << " ";

			if (temp->left) q.push(temp->left);
			if (temp->right) q.push(temp->right);
		}
		cout << endl; // Move to next line after each level
	}
}

int main() {
	node* root = NULL;
	cout << "\nEnter Data to Create BST (-1 to stop): " << endl;
	takeInput(root);
	
	cout << "\nPreorder Traversal: ";
	preorder(root); 
	
	cout << "\nInorder Traversal: ";
	inorder(root);
	
	cout << "\nPostorder Traversal: ";
	postorder(root);
	
	cout << "\nLevel Order Traversal (One Level Per Line):" << endl;
	levelOrderTraversal(root);

	
	return 0;
}
