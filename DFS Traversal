#include<iostream>
#include<vector>
using namespace std;

void dfs(int node, vector<vector<int>> &adjList, vector<bool> &visited) {
	visited[node]=true;
	cout<<node<<" ";
	//visit all unvisited neighbors
	for(int nb:adjList[node]) {
		if(!visited[nb]) {
			dfs(nb, adjList, visited);
		}
	}
}

int main() {
	int n,m;
	cout<<"Enter no of nodes: ";
	cin>>n;
	cout<<"Enter no of edges: ";
	cin>>m;
	//indexing will be start from +1 (1 based node)
	vector<vector<int>> adjList(n+1);
	cout<<"Enter edges (u, v) for undirected graph: "<<endl;
	for(int i=0;i<m;i++) {
		int u,v;
		cin>>u>>v;
		adjList[u].push_back(v);
		adjList[v].push_back(u); //for only undirected graph
	}
	
	int start;
	cout<<"Enter start node : ";//optional can be neglected and defualt start with 1(start)
	cin>>start;
	
	vector<bool>visited(n+1, false);
	dfs(start, adjList, visited);
	cout<<endl;
	
	return 0;
}
